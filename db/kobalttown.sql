-- MySQL Script generated by MySQL Workbench
-- Sat Jan  4 15:18:32 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema kobalttown
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `kobalttown` ;

-- -----------------------------------------------------
-- Schema kobalttown
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `kobalttown` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci ;
SHOW WARNINGS;
USE `kobalttown` ;

-- -----------------------------------------------------
-- Table `kobalttown`.`user_account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kobalttown`.`user_account` (
  `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nickname` VARCHAR(64) NOT NULL,
  `enabled` TINYINT NOT NULL DEFAULT 0,
  `created_at` BIGINT NOT NULL,
  `updated_at` BIGINT NOT NULL,
  `modify_ts` TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
  PRIMARY KEY (`id`),
  UNIQUE INDEX `UQ_NICKNAME` (`nickname` ASC))
ENGINE = InnoDB
COMMENT = 'kr.lul.kobalttown.account.data.entity.AccountEntity';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `kobalttown`.`user_credential`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kobalttown`.`user_credential` (
  `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `account` BIGINT UNSIGNED NOT NULL,
  `public_key` VARCHAR(255) NOT NULL,
  `secret_hash` VARCHAR(60) NOT NULL,
  `created_at` BIGINT NOT NULL,
  `modify_ts` TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
  PRIMARY KEY (`id`),
  INDEX `FK_CREDENTIAL_PK_ACCOUNT` (`account` ASC),
  UNIQUE INDEX `UQ_CREDENTIAL_PUBLIC_KEY` (`public_key` ASC),
  CONSTRAINT `fk_user_credential_user_account`
    FOREIGN KEY (`account`)
    REFERENCES `kobalttown`.`user_account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'kr.lul.kobalttown.account.data.entity.CredentialEntity';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `kobalttown`.`log_account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kobalttown`.`log_account` (
  `lid` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `crud` ENUM('C', 'R', 'U', 'D') NOT NULL,
  `log_ts` TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
  `id` BIGINT UNSIGNED NOT NULL,
  `nickname` VARCHAR(45) NOT NULL,
  `enabled` TINYINT NOT NULL DEFAULT 0,
  `created_at` BIGINT NOT NULL,
  `updated_at` BIGINT NOT NULL,
  `modify_ts` DATETIME(3) NOT NULL,
  PRIMARY KEY (`lid`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `kobalttown`.`log_credential`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kobalttown`.`log_credential` (
  `lid` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `crud` ENUM('C', 'R', 'U', 'D') NOT NULL,
  `log_ts` TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
  `id` BIGINT UNSIGNED NOT NULL,
  `account` BIGINT UNSIGNED NOT NULL,
  `public_key` VARCHAR(255) NOT NULL,
  `secret_hash` VARCHAR(60) NOT NULL,
  `created_at` BIGINT NOT NULL,
  `modify_ts` DATETIME(3) NOT NULL,
  PRIMARY KEY (`lid`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `kobalttown`.`user_validation_code`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kobalttown`.`user_validation_code` (
  `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `account` BIGINT UNSIGNED NOT NULL,
  `email` VARCHAR(320) NOT NULL,
  `code` CHAR(64) NOT NULL,
  `expire_at` BIGINT NOT NULL,
  `used_at` BIGINT NULL DEFAULT NULL,
  `expired_at` BIGINT NULL DEFAULT NULL,
  `created_at` BIGINT NOT NULL,
  `updated_at` BIGINT NOT NULL,
  `modify_ts` TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
  PRIMARY KEY (`id`),
  INDEX `FK_VALIDATION_CODE_PK_ACCOUNT` (`account` ASC),
  UNIQUE INDEX `UQ_VALIDATION_CODE` (`code` ASC),
  INDEX `IDX_VALIDATION_CODE_EMAIL` (`email` ASC),
  INDEX `IDX_VALIDATION_CODE_VALID` (`expire_at` DESC, `used_at` ASC, `expired_at` ASC),
  CONSTRAINT `FK_VALIDATION_CODE_PK_ACCOUNT`
    FOREIGN KEY (`account`)
    REFERENCES `kobalttown`.`user_account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `kobalttown`.`log_validation_code`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kobalttown`.`log_validation_code` (
  `lid` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `crud` ENUM('C', 'R', 'U', 'D') NOT NULL,
  `log_ts` TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
  `id` BIGINT UNSIGNED NOT NULL,
  `account` BIGINT UNSIGNED NOT NULL,
  `email` VARCHAR(320) NOT NULL,
  `code` CHAR(64) NOT NULL,
  `expire_at` BIGINT NOT NULL,
  `used_at` BIGINT NULL DEFAULT NULL,
  `expired_at` BIGINT NULL DEFAULT NULL,
  `created_at` BIGINT NOT NULL,
  `updated_at` BIGINT NOT NULL,
  `modify_ts` DATETIME(3) NOT NULL,
  PRIMARY KEY (`lid`))
ENGINE = InnoDB;

SHOW WARNINGS;
USE `kobalttown` ;

-- -----------------------------------------------------
-- View `kobalttown`.`view_account`
-- -----------------------------------------------------
USE `kobalttown`;
CREATE  OR REPLACE VIEW `view_account` AS
    SELECT 
        `a`.`id`,
        `a`.`nickname`,
        `a`.`enabled`,
        `a`.`created_at` AS `account_created_at`,
        `a`.`updated_at` AS `account_updated_at`,
        `a`.`modify_ts` AS `account_modify_ts`,
        `c`.`id` AS `cid`,
        `c`.`public_key`,
        `c`.`secret_hash`,
        `c`.`created_at`,
        `c`.`modify_ts`
    FROM
        `user_account` AS `a`
            LEFT JOIN
        `user_credential` AS `c` ON `a`.`id` = `c`.`account`
;
SHOW WARNINGS;

-- -----------------------------------------------------
-- View `kobalttown`.`view_account_validation_code`
-- -----------------------------------------------------
USE `kobalttown`;
CREATE  OR REPLACE VIEW `view_account_validation_code` AS
    SELECT 
        `a`.`id`,
        `a`.`nickname`,
        `a`.`enabled`,
        `a`.`created_at` AS `account_created_at`,
        `a`.`updated_at` AS `account_updated_at`,
        `a`.`modify_ts` AS `account_modify_ts`,
        `c`.`id` AS `cid`,
        `c`.`email`,
        `c`.`code`,
        `c`.`expire_at`,
        `c`.`used_at`,
        `c`.`expired_at`,
        `c`.`created_at`,
        `c`.`updated_at`,
        `c`.`modify_ts`
    FROM
        `user_account` AS `a`
            LEFT JOIN
        `user_validation_code` AS `c` ON `a`.`id` = `c`.`account`
;
SHOW WARNINGS;
USE `kobalttown`;

DELIMITER $$
SHOW WARNINGS$$
USE `kobalttown`$$
CREATE DEFINER = CURRENT_USER TRIGGER `kobalttown`.`log_account_update` AFTER UPDATE ON `user_account` FOR EACH ROW
BEGIN
	INSERT INTO `kobalttown`.`log_account` (`CRUD`, `id`, `nickname`, `enabled`, `created_at`, `updated_at`, `modify_ts`)
	VALUES ('U', OLD.`id`, OLD.`nickname`, OLD.`enabled`, OLD.`created_at`, OLD.`updated_at`, OLD.`modify_ts`);
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `kobalttown`$$
CREATE DEFINER = CURRENT_USER TRIGGER `kobalttown`.`log_account_delete` AFTER DELETE ON `user_account` FOR EACH ROW
BEGIN
	INSERT INTO `kobalttown`.`log_account` (`CRUD`, `id`, `nickname`, `enabled`, `created_at`, `updated_at`, `modify_ts`)
	VALUES
		('D', OLD.`id`, OLD.`nickname`, OLD.`enabled`, OLD.`created_at`, OLD.`updated_at`, OLD.`modify_ts`);
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `kobalttown`$$
CREATE DEFINER = CURRENT_USER TRIGGER `kobalttown`.`log_credential_update` BEFORE UPDATE ON `user_credential` FOR EACH ROW
BEGIN
	INSERT INTO `kobalttown`.`log_credential` (`crud`, `id`, `account`, `public_key`, `secret_hash`, `created_at`, `modify_ts`)
	VALUES ('U', OLD.`id`, OLD.`account`, OLD.`public_key`, OLD.`secret_hash`, OLD.`created_at`, OLD.`modify_ts`);
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `kobalttown`$$
CREATE DEFINER = CURRENT_USER TRIGGER `kobalttown`.`log_credential_delete` BEFORE DELETE ON `user_credential` FOR EACH ROW
BEGIN
	INSERT INTO `kobalttown`.`log_credential` (`crud`, `id`, `account`, `public_key`, `secret_hash`, `created_at`, `modify_ts`)
	VALUES ('D', OLD.`id`, OLD.`account`, OLD.`public_key`, OLD.`secret_hash`, OLD.`created_at`, OLD.`modify_ts`);
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `kobalttown`$$
CREATE DEFINER = CURRENT_USER TRIGGER `kobalttown`.`log_user_validation_code_update` AFTER UPDATE ON `user_validation_code` FOR EACH ROW
BEGIN
    INSERT INTO `kobalttown`.`log_validation_code` (`crud`, `id`, `account`, `email`, `code`, `expire_at`, `used_at`, `expired_at`, `created_at`, `updated_at`, `modify_ts`)
    VALUES ('U', OLD.`id`, OLD.`account`, OLD.`email`, OLD.`code`, OLD.`expire_at`, OLD.`used_at`, OLD.`expired_at`, OLD.`created_at`, OLD.`updated_at`, OLD.`modify_ts`);
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `kobalttown`$$
CREATE DEFINER = CURRENT_USER TRIGGER `kobalttown`.`log_user_validation_code_delete` AFTER DELETE ON `user_validation_code` FOR EACH ROW
BEGIN
    INSERT INTO `kobalttown`.`log_validation_code` (`crud`, `id`, `account`, `email`, `code`, `expire_at`, `used_at`, `expired_at`, `created_at`, `updated_at`, `modify_ts`)
    VALUES ('D', OLD.`id`, OLD.`account`, OLD.`email`, OLD.`code`, OLD.`expire_at`, OLD.`used_at`, OLD.`expired_at`, OLD.`created_at`, OLD.`updated_at`, OLD.`modify_ts`);
END$$

SHOW WARNINGS$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
